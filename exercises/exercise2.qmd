---
title: "Exercise 2: Random Walk Ricker"
format:
  html:
    theme: default
    number-sections: true
---

```{r}
library(samEst);library(ggplot2)

#Function: this function gives a stochastic draw from a Ricker function with defined parameters
ricker_RS=function(alpha,beta,S,sigma){
  RS=rnorm(1,alpha - beta*S,sigma) #this draws the realized productivity (log RS) with the specified level of error
  return(RS)
}
```

In this exercise we'll expand upon the previous simulation to examine what happens when the parameters of the Ricker curve are non-stationary in time - through several scenarios.

#E2: Non-stationary (aka time-varying, aka random walk) Ricker models

We'll begin by simulating a spawner-recruit time-series from the Ricker function and to see how the parameters dictate this relationship, first start with these parameters.

Starting with changes in productivity (alpha):
```{r}
#Simulation parameters:
N=30 #length of time-series
L=N+4 #length of time-series +4 for starting cohorts

#Key parameters: alpha, beta, and sigma
alpha <- seq(2.3,0.6, length.out=L) # productivity decline over 30 years
beta <- 1/(1000) # capacity rate -often easier to conceptualize as Smax (1/beta) as its far more interpretable
sigma <- 0.3 # ranges from ~0.2 to 1.5 for most Pacific salmon stocks
Seq <- alpha/beta # equilibrium spawners - just used for the simulation start points

#the rest of the simulation parameters
RS=numeric(L) #productivity in each year
S=numeric(L);S[1:4]=runif(4,Seq*0.8,Seq*1.2) #spawners in each year, we start with an initial escapement of 600 individuals
R=numeric(L) #recruits in each year
U=runif(L,0.4,0.6) #Harvest rate of cohorts with low variance 
#(note U should be within the range of 0 to 1)


for(t in 5:L){
  RS[t]=ricker_RS(alpha[t],beta,sigma,S=S[t-4]) #draw productivity in each year
  R[t]=exp(RS[t])*S[t-4] #transform into recruits by converting logRS to RS (recruits per spawner) times spawners
  S[t]=R[t]*U[t] #escapement left after harvest
}

#Pare down the time-series and align the spawners and recruit estimates (which are currently staggered 4 years)
S=S[-((L-3):L)] #Chop off the final spawner estimate to retain just the length L
R<-R[5:L]
RS<-RS[5:L]
df=data.frame(S=S,R=R,logRS=RS,by=seq(1:30)) #Make a dataframe with the required information for samEst

#We'll fit a stationary curve
m=lm(RS~S)

S_pred <-seq(min(S),max(S),length.out=200)
R_pred <- exp(m$coefficient[1]+m$coefficient[2]*S_pred)*S_pred 

df_pred <- data.frame(S_pred = S_pred,
                      R_pred = R_pred)

 ggplot2::ggplot(df, aes(S, R)) +
 geom_line(data=df_pred,aes(x=S_pred,y=R_pred),linewidth=1.3)+
      geom_point(aes(colour = by),size=2.5) +
      scale_colour_viridis_c(name='Year')+
      xlab("Spawners") + 
      ylab("Recruits")+
      xlim(0, max(df$S))+
      ylim(0, max(df$R))
```

Let's look at the residuals too. 
```{r}
df$residuals<-m$residuals
ggplot(df, aes(by, residuals))+
geom_point(aes(colour = residuals), stroke=2)+
geom_hline(yintercept=0,linewidth=1.3)+
scale_colour_viridis_c(name='p')+
ggtitle("Residuals")+
theme_classic(14)+
theme(panel.background = element_blank(),strip.background = element_rect(colour=NA, fill=NA),panel.border = element_rect(fill = NA, color = "black"),
                  strip.text = element_text(face="bold", size=12),
                  axis.text=element_text(face="bold"),axis.title = element_text(face="bold"),plot.title = element_text(face = "bold", hjust = 0.5,size=15))
          

```



Let's see if we can explicitly recover this trend using a Ricker model with time-varying (random walk) in productivity:

```{r}
m_rwa_tmb<- samEst::ricker_rw_TMB(data=df,tv.par='a')
#m_rwa_tmb stores a lot of information - eg. maximum likelihood estimates for the different parameters, model code, etc.


#Examining the point estimates for max. productivity:
m_rwa_tmb$alpha

#Plot the fit to the data
samEst::sr_plot(df=df,mod=m_rwa_tmb,type='rw',par='a',form='tmb',title='fit to simulated data')


#plot residuals
df$residuals<-m_rwa_tmb$residuals
ggplot(df, aes(by, residuals))+
geom_point(aes(colour = residuals), stroke=2)+
geom_hline(yintercept=0,linewidth=1.3)+
scale_colour_viridis_c(name='p')+
ggtitle("Residuals")+
theme_classic(14)+
theme(panel.background = element_blank(),strip.background = element_rect(colour=NA, fill=NA),panel.border = element_rect(fill = NA, color = "black"),
                  strip.text = element_text(face="bold", size=12),
                  axis.text=element_text(face="bold"),axis.title = element_text(face="bold"),plot.title = element_text(face = "bold", hjust = 0.5,size=15))
          


```

How does it compare to the true underlying values?

```{r}
pred_sim=data.frame(pred=m_rwa_tmb$alpha,sim=alpha[5:L])


ggplot2::ggplot(pred_sim, aes(pred, sim)) +
      geom_point(aes(colour = as.numeric(rownames(pred_sim))),size=2.5) +
      scale_colour_viridis_c(name='Year')+geom_abline(intercept=0,slope=1)
```

Was it able to capture the underlying trend? Try changing the parameters (time-series length, trend - upwards/magnitude, sigma, etc.).

You can also make the dynamics of alpha more complex or more random - feel free to use these in the simulation code above instead:
```{r}
#alpha=rnorm(L,1.5,0.5) White noise in productivity

#Or a random walk: which is how it is also modelled
#alpha=1.5
#sig_a=0.5
#for(t in 2:L){alpha[t]=alpha[t-1]+rnorm(1,0,1)*sig_a}
```

Let's try with changing capacity next:
```{r}
#Simulation parameters:
N=30 #length of time-series
L=N+4 #length of time-series +4 for starting cohorts
RS=numeric(L) #productivity in each year
S=numeric(L);S[1:4]=runif(4,Seq*0.8,Seq*1.2) #spawners in each year, we start with an initial escapement of 600 individuals
R=numeric(L) #recruits in each year
U=runif(L,0.4,0.6) #Harvest rate of cohorts with low variance 
#(note U should be within the range of 0 to 1)

#Key parameters: alpha, beta, and sigma
alpha<- 1.5 # productivity decline over 30 years
Smax<- seq(2000,300,length.out=L) #Express as Smax first, just easier to conceptualize
beta<- 1/Smax # capacity rate -often easier to conceptualize as Smax (1/beta) as its far more interpretable
sigma<- 0.3 # ranges from ~0.2 to 1.5 for most Pacific salmon stocks
Seq<-alpha/beta # equilibrium spawners - just used for the simulation start points


for(t in 5:L){
  RS[t]=ricker_RS(alpha,beta[t],sigma,S=S[t-4]) #draw productivity in each year
  R[t]=exp(RS[t])*S[t-4] #transform into recruits by converting logRS to RS (recruits per spawner) times spawners
  S[t]=R[t]*U[t] #escapement left after harvest
}

#Pare down the time-series and align the spawners and recruit estimates (which are currently staggered 4 years)
S=S[-((L-3):L)] #Chop off the final spawner estimate to retain just the length L
R<-R[5:L]
RS<-RS[5:L]
df=data.frame(S=S,R=R,logRS=RS,by=seq(1:30)) #Make a dataframe with the required information for samEst
```

Let's see if we can explicitly recover this trend now using a Ricker model with time-varying (random walk) in capacity:

```{r}
m_rwb_tmb<- samEst::ricker_rw_TMB(data=df,tv.par='b')

#The series for Smax
m_rwb_tmb$Smax

samEst::sr_plot(df=df,mod=m_rwb_tmb,type='rw',par='b',form='tmb',title='simulation')
```

Let's look at the residuals too. 
```{r}
df$residuals<-m_rwb_tmb$residuals
ggplot(df, aes(by, residuals))+
geom_point(aes(colour = residuals), stroke=2)+
geom_hline(yintercept=0,linewidth=1.3)+
scale_colour_viridis_c(name='p')+
ggtitle("Residuals")+
theme_classic(14)+
theme(panel.background = element_blank(),strip.background = element_rect(colour=NA, fill=NA),panel.border = element_rect(fill = NA, color = "black"),
strip.text = element_text(face="bold", size=12),
                  axis.text=element_text(face="bold"),axis.title = element_text(face="bold"),plot.title = element_text(face = "bold", hjust = 0.5,size=15))
          

```

```{r}
pred_sim=data.frame(pred=m_rwb_tmb$Smax,sim=Smax[5:L])

ggplot2::ggplot(pred_sim, aes(pred, sim)) +
      geom_point(aes(colour = as.numeric(rownames(pred_sim))),size=2.5) +
      scale_colour_viridis_c(name='Year')+geom_abline(intercept=0,slope=1)
```


Of course, in reality we cannot know a priori which parameter is changing just by examining the spawner-recruitment plot (although we may have some system/ecological knowledge pointing towards either a change in productivity or capacity).

We can compare model fits with either formulation to the above scenario where capacity is changing. You can pull out two information criteria that balance the model likelihood with parsimony (by penalizing more complex models) - AIC (Akaike Informtaion Criterion, adjusted for small sample sizes) or BIC (Bayesian Information Criterion), the latter tends to be more conservative in terms of penalizing complexity.

```{r}
#We will fit the random walk alpha model to the dataset generated with a capacity change
m_rwa_tmb<- samEst::ricker_rw_TMB(data=df,tv.par='a')

m_rwa_tmb$AICc
m_rwb_tmb$AICc
#The lower AICc == higher model likelihood

m_rwa_tmb$BIC
m_rwb_tmb$BIC
#The lower BIC == higher model likelihood
```


We can even estimate with both parameters - but it can have convergence issues so beware...

```{r}
m_rwab_tmb<- samEst::ricker_rw_TMB(data=df,tv.par='both')
m_rwab_tmb$alpha
m_rwab_tmb$Smax

m_rwa_tmb$AICc
m_rwb_tmb$AICc
m_rwab_tmb$AICc
```

You can also extract all of the reference points estimated for any of these models, In some cases they will be static and in others time-varying.
```{r}
m_rwa_tmb$Smsy

m_rwb_tmb$Smsy

m_rwa_tmb$umsy
```
